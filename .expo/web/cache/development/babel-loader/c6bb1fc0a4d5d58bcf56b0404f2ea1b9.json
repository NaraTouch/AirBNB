{"ast":null,"code":"import _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\React-Native\\\\AirBNB\\\\AirBNB\\\\node_modules\\\\react-navigation-tabs\\\\dist\\\\navigators\\\\createMaterialTopTabNavigator.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function () { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport createTabNavigator from \"../utils/createTabNavigator\";\nimport MaterialTopTabBar from \"../views/MaterialTopTabBar\";\nimport ResourceSavingScene from \"../views/ResourceSavingScene\";\n\nvar TabView = function (_React$PureComponent) {\n  _inherits(TabView, _React$PureComponent);\n\n  var _super = _createSuper(TabView);\n\n  function TabView() {\n    var _this;\n\n    _classCallCheck(this, TabView);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _super.call.apply(_super, [this].concat(args));\n\n    _this._getLabel = function (_ref) {\n      var route = _ref.route,\n          tintColor = _ref.tintColor,\n          focused = _ref.focused;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarLabel) {\n        return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarLabel;\n      }\n\n      if (typeof options.title === 'string') {\n        return options.title;\n      }\n\n      return route.routeName;\n    };\n\n    _this._getTestIDProps = function (_ref2) {\n      var route = _ref2.route,\n          focused = _ref2.focused;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({\n        focused: focused\n      }) : options.tabBarTestIDProps;\n    };\n\n    _this._renderIcon = function (_ref3) {\n      var focused = _ref3.focused,\n          route = _ref3.route,\n          tintColor = _ref3.tintColor;\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n\n      if (options.tabBarIcon) {\n        return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({\n          tintColor: tintColor,\n          focused: focused\n        }) : options.tabBarIcon;\n      }\n\n      return null;\n    };\n\n    _this._renderTabBar = function (props) {\n      var state = _this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = _this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n      var _this$props = _this.props,\n          _this$props$tabBarCom = _this$props.tabBarComponent,\n          TabBarComponent = _this$props$tabBarCom === void 0 ? MaterialTopTabBar : _this$props$tabBarCom,\n          tabBarPosition = _this$props.tabBarPosition,\n          tabBarOptions = _this$props.tabBarOptions;\n\n      if (TabBarComponent === null || !tabBarVisible) {\n        return null;\n      }\n\n      return React.createElement(TabBarComponent, _extends({}, tabBarOptions, props, {\n        tabBarPosition: tabBarPosition,\n        screenProps: _this.props.screenProps,\n        navigation: _this.props.navigation,\n        getLabelText: _this.props.getLabelText,\n        getTestIDProps: _this._getTestIDProps,\n        renderIcon: _this._renderIcon,\n        onTabPress: _this.props.onTabPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 12\n        }\n      }));\n    };\n\n    _this._renderPanPager = function (props) {\n      return React.createElement(TabViewPagerPan, _extends({}, props, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 30\n        }\n      }));\n    };\n\n    _this._renderScene = function (_ref4) {\n      var route = _ref4.route,\n          focused = _ref4.focused;\n      var _this$props2 = _this.props,\n          renderScene = _this$props2.renderScene,\n          animationEnabled = _this$props2.animationEnabled,\n          swipeEnabled = _this$props2.swipeEnabled;\n\n      if (animationEnabled === false && swipeEnabled === false) {\n        return React.createElement(ResourceSavingScene, {\n          isFocused: focused,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 14\n          }\n        }, renderScene({\n          route: route\n        }));\n      }\n\n      return renderScene({\n        route: route\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(TabView, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props3 = this.props,\n          navigation = _this$props3.navigation,\n          tabBarPosition = _this$props3.tabBarPosition,\n          animationEnabled = _this$props3.animationEnabled,\n          renderScene = _this$props3.renderScene,\n          rest = _objectWithoutProperties(_this$props3, [\"navigation\", \"tabBarPosition\", \"animationEnabled\", \"renderScene\"]);\n\n      var renderHeader;\n      var renderFooter;\n      var renderPager;\n      var state = this.props.navigation.state;\n      var route = state.routes[state.index];\n      var descriptors = this.props.descriptors;\n      var descriptor = descriptors[route.key];\n      var options = descriptor.options;\n      var swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n      if (typeof swipeEnabled === 'function') {\n        swipeEnabled = swipeEnabled(state);\n      }\n\n      if (tabBarPosition === 'bottom') {\n        renderFooter = this._renderTabBar;\n      } else {\n        renderHeader = this._renderTabBar;\n      }\n\n      if (animationEnabled === false && swipeEnabled === false) {\n        renderPager = this._renderPanPager;\n      }\n\n      return React.createElement(TabViewAnimated, _extends({}, rest, {\n        navigationState: navigation.state,\n        animationEnabled: animationEnabled,\n        swipeEnabled: swipeEnabled,\n        renderPager: renderPager,\n        renderHeader: renderHeader,\n        renderFooter: renderFooter,\n        renderScene: this._renderScene,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 12\n        }\n      }));\n    }\n  }]);\n\n  return TabView;\n}(React.PureComponent);\n\nTabView.defaultProps = {\n  initialLayout: Platform.select({\n    android: {\n      width: 1,\n      height: 0\n    }\n  })\n};\nexport default createTabNavigator(TabView);","map":{"version":3,"sources":["C:/React-Native/AirBNB/AirBNB/node_modules/react-navigation-tabs/dist/navigators/createMaterialTopTabNavigator.js"],"names":["React","TabViewAnimated","TabViewPagerPan","createTabNavigator","MaterialTopTabBar","ResourceSavingScene","TabView","_getLabel","route","tintColor","focused","descriptors","props","descriptor","key","options","tabBarLabel","title","routeName","_getTestIDProps","tabBarTestIDProps","_renderIcon","tabBarIcon","_renderTabBar","state","navigation","routes","index","tabBarVisible","tabBarComponent","TabBarComponent","tabBarPosition","tabBarOptions","screenProps","getLabelText","onTabPress","_renderPanPager","_renderScene","renderScene","animationEnabled","swipeEnabled","rest","renderHeader","renderFooter","renderPager","PureComponent","defaultProps","initialLayout","Platform","select","android","width","height"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Platform } from 'react-native';\nimport { TabViewAnimated, TabViewPagerPan } from 'react-native-tab-view';\nimport createTabNavigator from '../utils/createTabNavigator';\nimport MaterialTopTabBar from '../views/MaterialTopTabBar';\nimport ResourceSavingScene from '../views/ResourceSavingScene';\n\nclass TabView extends React.PureComponent {\n  static defaultProps = {\n    // fix for https://github.com/react-native-community/react-native-tab-view/issues/312\n    initialLayout: Platform.select({\n      android: { width: 1, height: 0 }\n    })\n  };\n\n  _getLabel = ({ route, tintColor, focused }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarLabel) {\n      return typeof options.tabBarLabel === 'function' ? options.tabBarLabel({ tintColor, focused }) : options.tabBarLabel;\n    }\n\n    if (typeof options.title === 'string') {\n      return options.title;\n    }\n\n    return route.routeName;\n  };\n\n  _getTestIDProps = ({ route, focused }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    return typeof options.tabBarTestIDProps === 'function' ? options.tabBarTestIDProps({ focused }) : options.tabBarTestIDProps;\n  };\n\n  _renderIcon = ({ focused, route, tintColor }) => {\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    if (options.tabBarIcon) {\n      return typeof options.tabBarIcon === 'function' ? options.tabBarIcon({ tintColor, focused }) : options.tabBarIcon;\n    }\n\n    return null;\n  };\n\n  _renderTabBar = props => {\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    const tabBarVisible = options.tabBarVisible == null ? true : options.tabBarVisible;\n\n    const {\n      tabBarComponent: TabBarComponent = MaterialTopTabBar,\n      tabBarPosition,\n      tabBarOptions\n    } = this.props;\n\n    if (TabBarComponent === null || !tabBarVisible) {\n      return null;\n    }\n\n    return <TabBarComponent {...tabBarOptions} {...props} tabBarPosition={tabBarPosition} screenProps={this.props.screenProps} navigation={this.props.navigation} getLabelText={this.props.getLabelText} getTestIDProps={this._getTestIDProps} renderIcon={this._renderIcon} onTabPress={this.props.onTabPress} />;\n  };\n\n  _renderPanPager = props => <TabViewPagerPan {...props} />;\n\n  _renderScene = ({ route, focused }) => {\n    const { renderScene, animationEnabled, swipeEnabled } = this.props;\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      return <ResourceSavingScene isFocused={focused}>\n          {renderScene({ route })}\n        </ResourceSavingScene>;\n    }\n\n    return renderScene({ route });\n  };\n\n  render() {\n    const {\n      navigation,\n      tabBarPosition,\n      animationEnabled,\n      // eslint-disable-next-line no-unused-vars\n      renderScene,\n      ...rest\n    } = this.props;\n\n    let renderHeader;\n    let renderFooter;\n    let renderPager;\n\n    const { state } = this.props.navigation;\n    const route = state.routes[state.index];\n    const { descriptors } = this.props;\n    const descriptor = descriptors[route.key];\n    const options = descriptor.options;\n\n    let swipeEnabled = options.swipeEnabled == null ? this.props.swipeEnabled : options.swipeEnabled;\n\n    if (typeof swipeEnabled === 'function') {\n      swipeEnabled = swipeEnabled(state);\n    }\n\n    if (tabBarPosition === 'bottom') {\n      renderFooter = this._renderTabBar;\n    } else {\n      renderHeader = this._renderTabBar;\n    }\n\n    if (animationEnabled === false && swipeEnabled === false) {\n      renderPager = this._renderPanPager;\n    }\n\n    return <TabViewAnimated {...rest} navigationState={navigation.state} animationEnabled={animationEnabled} swipeEnabled={swipeEnabled} renderPager={renderPager} renderHeader={renderHeader} renderFooter={renderFooter} renderScene={\n    /* $FlowFixMe */\n    this._renderScene} />;\n  }\n}\n\nexport default createTabNavigator(TabView);"]},"metadata":{},"sourceType":"module"}